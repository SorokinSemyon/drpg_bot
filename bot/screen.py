import app
from util import *

screen_text = {'start':            '–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å—Å—è –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ.\n'
                                   '–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É, –µ—Å–ª–∏ –µ–µ –µ—â—ë –Ω–µ—Ç, –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é',

               'create room':      '–í—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π',

               'enter room':       '–û—Ç–∫—Ä–æ–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:',

               'read description': '–ü—Ä–æ—á—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏',

               'wait role':        '–û–∂–∏–¥–∞–µ–º –ø–æ–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏',

               'select role':      '–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –≤—ã–±–∏—Ä–∏—Ç–µ —Ç–æ–≥–æ, –∑–∞ –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å',

               'read info':        '–ñ–¥–µ–º –ø–æ–∫–∞ –ø—Ä–æ–≥–æ–ª–æ—Å—É—é—Ç –¥—Ä—É–≥–∏–µ',

               'discussion':       '–ñ–¥–µ–º –ø–æ–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–∫—Ä–æ—é—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è',

               'voting':           '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—Å–µ',

               'killed':           '–í—ã –≤—ã–±—ã–ª–∏ –∏–∑ –∏–≥—Ä—ã.\n'
                                   '–ë–æ–ª—å—à–µ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏'}

# –¢–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º
common_screen_text = {'select role': '–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –≤—ã–±–∏—Ä–∏—Ç–µ —Ç–æ–≥–æ, –∑–∞ –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å',

                      'read info':   '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è {room.current_round} —Ä–∞—É–Ω–¥.\n'
                                     '–ü–æ–ª—É—á–∏—Ç–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.\n'
                                     '–û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ',

                      'discussion':  '–û–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å.\n'
                                     '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ–≥–æ –¥–æ—Å—Ä–æ—á–Ω–æ, –µ—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —ç—Ç–∏–º',

                      'voting':      '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≥–æ, –∫–æ–≥–æ –≤—ã –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ',

                      'finish':      '_–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –£–±–∏–π—Ü–µ–π –±—ã–ª *{room.killer_role_name}*\n'}


def get_common_screen_text(state: str, room: app.Room):
    text = common_screen_text[state] \
        .replace('{room.current_round}', str(room.current_round)) \
        .replace('{room.minutes_to_discuss}', str(room.minutes_to_discuss)) \
        .replace('{room.killer_role_name}', room.killer_role_name)

    return text


# –≠–∫—Ä–∞–Ω —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (–∫–Ω–æ–ø–∫–∞–º–∏) –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∏–≥—Ä–æ–∫—É –∏ –ø–æ—è—Å–Ω–µ–Ω–µ–º –∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º.
# –ì–æ–≤–æ—Ä–∏—Ç –∏–≥—Ä–æ–∫—É –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
def get_active_screen(user: app.User, is_screen_personal=True):
    if user.state == 'killed':
        print('KILLED')

    btn = app.commands[user.state]

    if is_screen_personal:
        text = screen_text[user.state]

        if user.state in ['read info', 'discussion', 'voting', 'killed']:
            btn = ['üòè']

    else:
        if user.state == 'killed' and user.room.current_round == user.room.numbers_of_rounds:
            text = get_common_screen_text('finish', user.room)
        else:
            text = get_common_screen_text(user.state, user.room)

        if user.state in ['finish', 'killed']:
            text += user.room.get_outcome_text() + '_'

    get_group_btn = {'<scenario_names>': user.get_list_scenario_names,
                     '<room_code>': lambda: [],
                     '<not_selected_roles>': user.get_list_not_selected_roles,
                     '<suspected_roles>': user.get_list_suspected_roles}

    group_btn = btn[0]
    if group_btn in get_group_btn:
        btn = get_group_btn[group_btn]() + btn[1:]

    markup = get_base_keyboard(btn)

    return f'_{text}_', markup


# –≠–∫—Ä–∞–Ω —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–Ω–∞—Ç–µ, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—É—é —Å–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º, –ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç—É, –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
def get_room_screen(user: app.User, with_code=True):
    room = user.room
    users = list(room.users)

    if with_code:
        text = f'*–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç—É: *{app.room_codes[room.id]}\n' \
               f'*–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤: ({room.count_user_with_role()}/{room.numbers_of_roles})*'
    else:
        text = '*–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:*'

    role_names = [user.role_name for user in users if user.role_name is not None]
    if role_names:
        len_max_role_name = len(max(role_names, key=len))
        if len_max_role_name < len('–ù–µ—Ç —Ä–æ–ª–∏'):
            len_max_role_name = len('–ù–µ—Ç —Ä–æ–ª–∏')
    else:
        len_max_role_name = len('–ù–µ—Ç —Ä–æ–ª–∏')

    players_list = ''
    for user in users:
        if user.role_id is None:
            role_name = '–ù–µ—Ç —Ä–æ–ª–∏: '
        else:
            role_name = user.role_name + ': '

        players_list += f'{align_string(role_name, len_max_role_name + 2)}'
        players_list += user.name + '\n'

    return f'{text}\n`{players_list}`', None


# –≠–∫—Ä–∞–Ω —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
def get_role_info_screen(user: app.User, round_number=None):
    if round_number is None:
        round_number = user.room.current_round

    if round_number != '–°–∫—Ä—ã—Ç—å':
        text = user.get_info(round_number)
    else:
        text = 'üôà'

    markup = get_inline_keyboard([str(number + 1) for number in range(user.room.current_round)] + ['–°–∫—Ä—ã—Ç—å'])
    return text, markup


# –≠–∫—Ä–∞–Ω —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
def get_role_screen(user: app.User, role=None):
    roles = user.get_list_roles()
    role_names = list(roles.keys())

    if role is None:
        role = role_names[0]

    description = roles[role]
    text = f'*–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞* {role}:\n' \
           f'{description}\n\n' \
           f'–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É'

    del role_names[role_names.index(role)]

    markup = get_inline_keyboard(role_names)

    return text, markup


# –≠–∫—Ä–∞–Ω —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ü–µ–Ω–∞—Ä–∏—è (–Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ —Ä–∞—Å—á–∏—Ç–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è)
def get_scenario_description_screen(user: app.User, data: str = '–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–Ω–æ—Å—Ç—å—é'):
    text = user.room.scenario_description
    if len(text) < 250:
        return text, None

    if data == '–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é':
        button_string = 'C–∫—Ä—ã—Ç—å'
    else:
        button_string = '–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é'
        text = shorten_string(text)

    markup = get_inline_keyboard([button_string])

    return text, markup
